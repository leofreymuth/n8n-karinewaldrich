{
  "active": false,
  "connections": {
    "formata_dados": {
      "main": [
        [
          {
            "node": "inclui_dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dados": {
      "main": [
        [
          {
            "node": "formata_dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "inclui_dados": {
      "main": [
        [
          {
            "node": "entra_na_fila",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "google_forms": {
      "main": [
        [
          {
            "node": "dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-08-23T00:27:28.254Z",
  "id": "T2fNIOrjvpNI7uhd",
  "meta": null,
  "name": "[COACHING] - CRM JÉSSICA: Qualificação - Parte 1 (manual via google forms)",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const fullNameAnswer = $node[\"dados\"].json[\"body\"][\"Nome\"] || \"\";\nconst emailAnswer = $node[\"dados\"].json[\"body\"][\"E-mail\"] || \"\";\nconst telefoneClienteOriginal = $node[\"dados\"].json[\"body\"][\"Telefone\"] || '';\n\nfunction capitalizeName(fullName) {\n    if (!fullName) {\n        return { fname: '', lname: '', fullname: '' };\n    }\n\n    const lowerCaseWords = ['da', 'de', 'do', 'di', 'du'];\n    let words = fullName.trim().toLowerCase().split(' ').map((word, index) => {\n        if (lowerCaseWords.includes(word) && index !== 0) {\n            return word;\n        }\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    });\n\n    let fname = words.shift() || '';\n    let lname = words.join(' ');\n\n    return { fname, lname, fullname: fname + (lname ? ' ' + lname : '') };\n}\n\nfunction formatEmail(email) {\n    return email.toLowerCase().trim();\n}\n\n// Garantir que telefoneClienteOriginal seja uma string antes de usar replace\nconst telefoneLimpo = String(telefoneClienteOriginal).replace(/\\D/g, \"\");\nconst DDI = '55';\nconst DDD = telefoneLimpo.slice(0, 2);\n\n// Determinar o número de telefone final\nconst telefoneFinal = `${DDI}${DDD}${telefoneLimpo.slice(2)}`;\n\nconst formattedNames = capitalizeName(fullNameAnswer);\nconst formattedEmail = formatEmail(emailAnswer);\nconst result = {\n    fname: formattedNames.fname, // Primeiro nome\n    lname: formattedNames.lname, // Sobrenome\n    fullname: formattedNames.fullname, // Nome completo\n    email: formattedEmail, // Email formatado\n    whatsapp: telefoneFinal, // WhatsApp formatado\n    qualificacao: \"qualificado\" // Variável adicional\n};\n\n// Aqui estamos ajustando a estrutura do retorno para se adequar ao que o n8n espera\nreturn [{ json: result }];\n"
      },
      "id": "c2fffed4-6940-4117-b8b1-b7c71c35b1f7",
      "name": "formata_dados",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        360
      ]
    },
    {
      "parameters": {
        "queue": "[COACHING] - Aguardando agendamento da SE - Jéssica",
        "options": {
          "arguments": {
            "argument": [
              {
                "key": "x-queue-type",
                "value": "quorum"
              }
            ]
          },
          "durable": true
        }
      },
      "id": "509a2433-179b-4e96-8387-86b3881f507c",
      "name": "entra_na_fila",
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1.1,
      "position": [
        1580,
        360
      ],
      "credentials": {
        "rabbitmq": {
          "id": "6klSivWaJBCNmE5C",
          "name": "[RABBITMQ] - Karine Waldrich"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": []
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "49a35687-3557-4c9e-943f-687745725caf",
      "name": "dados",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        920,
        360
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b5d54eaf-eef2-4edd-b2f7-f896ee2ee2ac",
              "name": "carreira",
              "value": "",
              "type": "string"
            },
            {
              "id": "571ac584-6a48-4585-ac44-3746e619e314",
              "name": "tempo",
              "value": "",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "99df54d0-b7f9-48b4-b417-be0dbd4b9be6",
      "name": "inclui_dados",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1340,
        360
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "2f7d192a-db92-4273-9436-f447bc33543f",
        "options": {}
      },
      "id": "8968d01a-e90c-4d0a-aeed-6146f7d9201a",
      "name": "google_forms",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        700,
        360
      ],
      "webhookId": "2f7d192a-db92-4273-9436-f447bc33543f"
    }
  ],
  "pinData": null,
  "settings": {
    "saveManualExecutions": true
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-08-23T00:27:28.254Z",
  "versionId": "bd33bfe5-4d9d-4a23-9208-3107dac4bc61"
}